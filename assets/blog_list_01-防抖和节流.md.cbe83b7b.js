import{_ as a,c as s,o as n,N as e}from"./chunks/framework.429f1e97.js";const A=JSON.parse('{"title":"轻松手写防抖和节流🔥","description":"","frontmatter":{},"headers":[],"relativePath":"blog/list/01-防抖和节流.md"}'),l={name:"blog/list/01-防抖和节流.md"},t=e(`<h1 id="轻松手写防抖和节流🔥" tabindex="-1">轻松手写防抖和节流🔥 <a class="header-anchor" href="#轻松手写防抖和节流🔥" aria-label="Permalink to &quot;轻松手写防抖和节流🔥&quot;">​</a></h1><p><a href="https://juejin.cn/post/7220303898257932347" target="_blank" rel="noreferrer">文章地址</a></p><h2 id="防抖" tabindex="-1">防抖 <a class="header-anchor" href="#防抖" aria-label="Permalink to &quot;防抖&quot;">​</a></h2><p>顾名思义，我们可以将防抖理解为是防止抖动。当我们在频繁地触发一个事件时，会引起不必要的性能损失，那么我们需要做的是让事件在停止触发后再触发，以此减少性能损失。</p><p>防抖就是要延迟执行，我们一直操作触发事件并且不执行，只有当停止操作后等才会执行。</p><p><strong>防抖函数</strong> 的作用是控制函数在一定时间内的执行次数。简单点说就是通过防抖函数让某个触发事件在 n 秒内只会被执行一次。</p><h2 id="节流" tabindex="-1">节流 <a class="header-anchor" href="#节流" aria-label="Permalink to &quot;节流&quot;">​</a></h2><p>节流是指绑定事件后，通过动作触发事件，在这段时间内，如果动作又发生，忽略该动作，一直到事件执行完后才能重新触发。通俗的说就是控制高频执行的次数。</p><p><strong>节流函数</strong> 的作用是在一个单位时间内最多只能触发一次函数执行，如果这个单位时间内多次触发函数，只能有一次生效。</p><h2 id="适用场景" tabindex="-1">适用场景 <a class="header-anchor" href="#适用场景" aria-label="Permalink to &quot;适用场景&quot;">​</a></h2><h3 id="防抖应用场景" tabindex="-1">防抖应用场景 <a class="header-anchor" href="#防抖应用场景" aria-label="Permalink to &quot;防抖应用场景&quot;">​</a></h3><p>防止多次提交按钮，只执行最后提交的一次</p><p>比较典型的有搜索事件，用户在不断输入值时，用防抖来节约请求资源，只有最后一次回车才能返回结果。还有按钮点击事件，为了防止用户多次重复提交也会使用防抖函数。</p><h3 id="防抖应用场景-1" tabindex="-1">防抖应用场景 <a class="header-anchor" href="#防抖应用场景-1" aria-label="Permalink to &quot;防抖应用场景&quot;">​</a></h3><p>节流适合大量事件按时间做平均分配触发。</p><p>比较典型的有监听滚动或 resize 事件，比如是否滑到底部自动加载更多，调整窗口大小。</p><h2 id="手写节流防抖函数" tabindex="-1">手写节流防抖函数 <a class="header-anchor" href="#手写节流防抖函数" aria-label="Permalink to &quot;手写节流防抖函数&quot;">​</a></h2><h4 id="防抖-1" tabindex="-1">防抖 <a class="header-anchor" href="#防抖-1" aria-label="Permalink to &quot;防抖&quot;">​</a></h4><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">function debounce(fn, delay) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    let timer = null;</span></span>
<span class="line"><span style="color:#A6ACCD;">    clearTimeout(timer); // 下次调用时会清除上次的timer， 然后重新延迟</span></span>
<span class="line"><span style="color:#A6ACCD;">    timer = setTimeout(function(){</span></span>
<span class="line"><span style="color:#A6ACCD;">        fn();</span></span>
<span class="line"><span style="color:#A6ACCD;">    }, delay);</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><h4 id="节流-1" tabindex="-1">节流 <a class="header-anchor" href="#节流-1" aria-label="Permalink to &quot;节流&quot;">​</a></h4><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">function throttle(fn, wait) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    let timer = null</span></span>
<span class="line"><span style="color:#A6ACCD;">    return function () {</span></span>
<span class="line"><span style="color:#A6ACCD;">        let context = this</span></span>
<span class="line"><span style="color:#A6ACCD;">        let args = arguments</span></span>
<span class="line"><span style="color:#A6ACCD;">        if (!timer) {</span></span>
<span class="line"><span style="color:#A6ACCD;">            timer = setTimeout(() =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">                timer = null</span></span>
<span class="line"><span style="color:#A6ACCD;">                fn.apply(context, args)</span></span>
<span class="line"><span style="color:#A6ACCD;">            }, wait)</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li>防抖：防止抖动，规定时间内事件触发会被重置，避免事件被误伤触发多次。代码实现重在清零 clearTimeout。防抖可以比作等电梯，只要有一个人进来，就需要再等一会儿。业务场景有避免登录按钮多次点击的重复提交。</li><li>节流：控制流量，单位时间内事件只能触发一次，与服务器端的限流 (Rate Limit) 类似。代码实现重在开锁关锁 timer=timeout; timer=null。节流可以比作过红绿灯，每等一个红灯时间就可以过一批。</li></ul>`,23),o=[t];function p(r,i,c,h,d,u){return n(),s("div",null,o)}const m=a(l,[["render",p]]);export{A as __pageData,m as default};
