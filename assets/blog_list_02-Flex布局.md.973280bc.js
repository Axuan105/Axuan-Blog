import{_ as e,c as l,o as a,N as i}from"./chunks/framework.429f1e97.js";const p=JSON.parse('{"title":"Flex 布局","description":"","frontmatter":{},"headers":[],"relativePath":"blog/list/02-Flex布局.md"}'),t={name:"blog/list/02-Flex布局.md"},r=i('<h1 id="flex-布局" tabindex="-1">Flex 布局 <a class="header-anchor" href="#flex-布局" aria-label="Permalink to &quot;Flex 布局&quot;">​</a></h1><h2 id="一、flex-基本概念" tabindex="-1">一、flex 基本概念 <a class="header-anchor" href="#一、flex-基本概念" aria-label="Permalink to &quot;一、flex 基本概念&quot;">​</a></h2><p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称&quot;容器&quot;。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称&quot;项目&quot;。</p><p>在 Flexbox 模型中，有三个核心概念：</p><ul><li>flex 项（注：也称 flex 子元素），需要布局的元素</li><li>flex 容器，其包含 flex 项</li><li>排列方向（direction），这决定了 flex 项的布局方向</li></ul><h2 id="二、容器属性" tabindex="-1">二、容器属性 <a class="header-anchor" href="#二、容器属性" aria-label="Permalink to &quot;二、容器属性&quot;">​</a></h2><h3 id="_2-1-flex-direction" tabindex="-1">2.1 flex-direction <a class="header-anchor" href="#_2-1-flex-direction" aria-label="Permalink to &quot;2.1 flex-direction&quot;">​</a></h3><p>flex-direction 属性决定主轴的方向（即项目的排列方向）。</p><ul><li>row（默认值）：主轴为水平方向，起点在左端。</li><li>row-reverse：主轴为水平方向，起点在右端。</li><li>column：主轴为垂直方向，起点在上沿。</li><li>column-reverse：主轴为垂直方向，起点在下沿。</li></ul><h3 id="_2-2-flex-wrap" tabindex="-1">2.2 flex-wrap <a class="header-anchor" href="#_2-2-flex-wrap" aria-label="Permalink to &quot;2.2 flex-wrap&quot;">​</a></h3><p>flex-wrap 决定如何换行</p><p>nowrap（默认）：不换行。 wrap：换行，第一行在上方。 wrap-reverse：换行，第一行在下方。</p><h3 id="_2-3-flex-flow" tabindex="-1">2.3 flex-flow <a class="header-anchor" href="#_2-3-flex-flow" aria-label="Permalink to &quot;2.3 flex-flow&quot;">​</a></h3><p>flex-flow 属性是 flex-direction 属性和 flex-wrap 属性的简写形式，默认值为 row nowrap。(2 个属性组合)</p><h3 id="_2-4-justify-content" tabindex="-1">2.4 justify-content <a class="header-anchor" href="#_2-4-justify-content" aria-label="Permalink to &quot;2.4 justify-content&quot;">​</a></h3><p>justify-content 属性定义了项目在主轴上的对齐方式。(默认是水平方向对齐方式，如水平居中等)</p><ul><li>flex-start（默认值）：左对齐</li><li>flex-end：右对齐</li><li>center： 居中</li><li>space-between：两端对齐，中间平分。</li><li>space-around：每个项目两侧的间隔相等</li></ul><h3 id="_2-5-align-items" tabindex="-1">2.5 align-items <a class="header-anchor" href="#_2-5-align-items" aria-label="Permalink to &quot;2.5 align-items&quot;">​</a></h3><p>align-items 属性定义项目在交叉轴上如何对齐。</p><ul><li>flex-start：交叉轴的起点对齐。</li><li>flex-end：交叉轴的终点对齐。</li><li>center：交叉轴的中点对齐。</li><li>baseline: 项目的第一行文字的基线对齐。</li><li>stretch：如果项目未设置高度或设为 auto，将占满整个容器的高度。</li></ul><h3 id="_2-6-align-content" tabindex="-1">2.6 align-content <a class="header-anchor" href="#_2-6-align-content" aria-label="Permalink to &quot;2.6 align-content&quot;">​</a></h3><p>align-content 属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p><ul><li>flex-start：与交叉轴的起点对齐。</li><li>flex-end：与交叉轴的终点对齐。</li><li>center：与交叉轴的中点对齐。</li><li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li><li>stretch（默认值）：轴线占满整个交叉轴</li></ul><h2 id="三、-项目属性" tabindex="-1">三、 项目属性 <a class="header-anchor" href="#三、-项目属性" aria-label="Permalink to &quot;三、 项目属性&quot;">​</a></h2><h3 id="_3-1-align-self-属性" tabindex="-1">3.1 align-self 属性 <a class="header-anchor" href="#_3-1-align-self-属性" aria-label="Permalink to &quot;3.1 align-self 属性&quot;">​</a></h3><p>align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。</p><h3 id="_3-2-flex-shrink-属性" tabindex="-1">3.2 flex-shrink 属性 <a class="header-anchor" href="#_3-2-flex-shrink-属性" aria-label="Permalink to &quot;3.2 flex-shrink 属性&quot;">​</a></h3><p>flex-shrink 属性定义了项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小。</p><h3 id="_3-3-order-属性" tabindex="-1">3.3 order 属性 <a class="header-anchor" href="#_3-3-order-属性" aria-label="Permalink to &quot;3.3 order 属性&quot;">​</a></h3><p>order 属性定义项目的排列顺序。数值越小，排列越靠前，默认为 0。</p><h3 id="_3-4-flex-grow-属性" tabindex="-1">3.4 flex-grow 属性 <a class="header-anchor" href="#_3-4-flex-grow-属性" aria-label="Permalink to &quot;3.4 flex-grow 属性&quot;">​</a></h3><p>flex-grow 属性定义项目的放大比例，默认为 0，存在剩余空间，也不放大。 如果所有项目的 flex-grow 属性都为 1，则它们将等分剩余空间（有空间）。如果一个项目的 flex-grow 属性为 2，其他项目都为 1，则前者占据的剩余空间将比其他项多一倍。</p><h3 id="_3-5-flex-属性" tabindex="-1">3.5 flex 属性 <a class="header-anchor" href="#_3-5-flex-属性" aria-label="Permalink to &quot;3.5 flex 属性&quot;">​</a></h3><p>flex 属性是 flex-grow, flex-shrink 和 flex-basis 的简写，默认值为 0 1 auto。后两个属性可选。</p><h3 id="_3-6-flex-basis-属性" tabindex="-1">3.6 flex-basis 属性 <a class="header-anchor" href="#_3-6-flex-basis-属性" aria-label="Permalink to &quot;3.6 flex-basis 属性&quot;">​</a></h3><p>flex-basis 属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为 auto，即项目的本来大小。</p>',36),o=[r];function n(s,f,h,x,c,d){return a(),l("div",null,o)}const _=e(t,[["render",n]]);export{p as __pageData,_ as default};
